{"name":"Typesafeconfig-guice","tagline":"Allows Guice Injection of configuration values from Typesafe Config","body":"# typesafeconfig-guice\r\nAllows [Guice](https://github.com/google/guice) to `@Inject` configuration values into your application derived from [Typesafe Config](https://github.com/typesafehub/config).\r\n\r\n## Step 1:\r\nAnnotate configuration injection points (Constructors, Providers, Fields) with ```@TypesafeConfig(\"config.path.key\")```\r\n\r\n## Step 2:\r\nBootstrap your application with Guice and the TypesafeConfigModule.\r\nConfiguration values annotated with @TypesafeConfig will be scanned for on the classpath, and then bound from your supplied Typesafe Config file.\r\n```java\r\nConfig config = ConfigFactory.load(\"config.conf\");\r\nInjector injector = Guice.createInjector(\r\n\tTypesafeConfigModule.fromConfig(testConf)\r\n\t// ... Add your other modules here\r\n);\r\n```\r\n\r\n## Step 3:\r\nProfit!\r\n\r\n## Features\r\n- Plain Old Java Objects which follow JavaBean conventions (zero-args constructor, getters and setters) can be injected. \r\n- Supports injections of `java.time.Duration` objects with config parameters defined as \"10 seconds\", \"10 minutes\" etc.\r\n- Supports injections of `com.typesafe.config.ConfigMemorySize` objects with config parameters defined as \"512k\" or \"2M\".\r\n- Supports injections of `boolean`, where the matching config parameter can be \"true\", \"false\", yes or no.\r\n- Extensive test coverage\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}